<?php
/**
 * @file
 * A content filter that adds permalinks to heading tags.
 */

/**
 * Implements hook_init().
 */
function permalink_filter_init() {
  // Add CSS if necessary.
  if (config_get('permalink_filter.settings', 'css')) {
    backdrop_add_css(backdrop_get_path('module', 'permalink_filter') . '/css/permalink_filter.css', array(
      'every_page' => TRUE,
    ));
  }
}

/**
 * Implements hook_filter_info().
 */
function permalink_filter_filter_info() {
  return array(
    'permalink_filter' => array(
      'title' => t('Add permalinks to heading tags'),
      'process callback' => 'permalink_filter_process',
      'weight' => 8,
    ),
  );
}

/**
 * Callback function to process the Permalink filter.
 */
function permalink_filter_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  // Get list of tags to use in pattern.
  $tags = '[';
  foreach (array_filter(config_get('permalink_filter.settings', 'tags')) as $tag) {
    $tags .= substr($tag, 1);
  }
  $tags .= ']';

  // Add permalinks to heading tags.
  $pattern = '/<(h' . $tags . ')\s*([^>]*?(?:id=["\']([^"\'>]*)["\'])?[^>]*)>(.*?)<\/h' . $tags . '>/is';
  $text = preg_replace_callback($pattern, 'permalink_filter_preg_callback', $text);

  return $text;
}

/**
 * Callback function to perform replacements for preg_replace_callback().
 */
function permalink_filter_preg_callback($match) {
  $settings = config_get('permalink_filter.settings');

  // Get match components.
  $text = $match[0];
  $tag = $match[1];
  $attributes = $match[2];
  $id = $match[3];
  $value = $match[4];

  // If an ID doesn't already exist, generate one and add it to the tag.
  if (empty($id)) {
    $id = backdrop_html_id(strip_tags($value));
    $attributes .= ' id="' . $id . '"';
  }

  // Add the permalink to the tag.
  $permalink = theme('permalink', array(
    'id' => $id,
    'text' => check_plain($settings['text']),
    'position' => $settings['position'],
    'value' => check_plain(strip_tags($value)),
    'css' => $settings['css'],
  ));
  if ($settings['position'] == 'before') {
    $value = $permalink . $value;
  }
  else {
    $value = $value . $permalink;
  }

  // Re-create the full tag.
  return "<$tag $attributes>$value</$tag>";
}

/**
 * Implements hook_theme().
 */
function permalink_filter_theme($existing, $type, $theme, $path) {
  return array(
    'permalink' => array(
      'variables' => array(
        'id' => '',
        'text' => '#',
        'position' => 'before',
        'value' => '',
        'css' => TRUE,
      ),
    ),
  );
}

/**
 * Returns HTML for a permalink.
 *
 * @param array $variables
 *   An associative array containing:
 *   - id: The fragment identifier of the link/tag.
 *   - text: The textual part of the link.
 *   - position: Where the permalink sits, relative to the tag ('before' or
 *     'after').
 *   - value: The heading text (stripped of any extra tags).
 *   - css: TRUE if default styling is to be applied to the link, FALSE
 *     otherwise.
 *
 * @return string
 *   An HTML string of the permalink.
 *
 * @ingroup themeable
 */
function theme_permalink($variables) {
  // Return the permalink.
  return l($variables['text'], '', array(
    'attributes' => array(
      'class' => array(
        'permalink-filter',
        'permalink-filter-' . $variables['position'],
      ),
      'title' => 'Permalink to ' . $variables['value'],
    ),
    'fragment' => $variables['id'],
    'external' => TRUE,
  ));
}

/**
 * Implements hook_menu().
 */
function permalink_filter_menu() {
  return array(
    'admin/config/content/permalink-filter' => array(
      'title' => 'Permalink filter',
      'description' => 'Configure where/how permalinks are added to heading tags.',
      'page callback' => 'backdrop_get_form',
      'page arguments' => array('permalink_filter_settings_form'),
      'access arguments' => array('administer filters'),
    ),
  );
}

/**
 * Form callback for the Permalink Filter settings form.
 */
function permalink_filter_settings_form($form, $form_state) {
  $settings = config_get('permalink_filter.settings');
  $form['#config'] = 'permalink_filter.settings';
  $form['#attached']['css'] = array(
    backdrop_get_path('module', 'permalink_filter') . '/css/permalink_filter.admin.css',
  );

  $form['tags'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Tags to add permalinks to'),
    '#options' => array(
      'h1' => 'H1',
      'h2' => 'H2',
      'h3' => 'H3',
      'h4' => 'H4',
      'h5' => 'H5',
      'h6' => 'H6',
    ),
    '#default_value' => $settings['tags'],
  );
  $form['text'] = array(
    '#type' => 'textfield',
    '#title' => t('Permalink text'),
    '#description' => t('Popular examples include: #, ¶, §.'),
    '#default_value' => $settings['text'],
    '#size' => 20,
  );
  $form['position'] = array(
    '#type' => 'radios',
    '#title' => t('Permalink position'),
    '#options' => array(
      'before' => t('Before the tag'),
      'after' => t('After the tag'),
    ),
    '#default_value' => $settings['position'],
  );
  $form['css'] = array(
    '#type' => 'checkbox',
    '#title' => t('Include default styling'),
    '#description' => t('Add default CSS to style permalinks (e.g. display on hover).'),
    '#default_value' => $settings['css'],
  );

  return system_settings_form($form);
}

/**
 * Implements hook_config_info().
 */
function permalink_filter_config_info() {
  return array(
    'permalink_filter.settings' => array(
      'label' => t('Permalink Filter settings'),
      'group' => t('Configuration'),
    ),
  );
}

